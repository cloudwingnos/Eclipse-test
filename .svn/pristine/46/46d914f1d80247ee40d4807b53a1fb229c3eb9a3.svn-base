package app.model.update;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;

import com.google.protobuf.InvalidProtocolBufferException;
import com.hazelcast.core.EntryEvent;
import com.hazelcast.map.listener.EntryAddedListener;
import com.hazelcast.map.listener.EntryUpdatedListener;
import com.hazelcast.util.function.Consumer;

import app.model.update.process.ModelDeviceIdSetEntryProcess;
import client.PlatfromClient;
import cn.sg.common.ImdgLogger;
import cn.sg.model.physical.common.rec.BasePModelRec;
import cn.sgepri.adapter.bus.Message;
import cn.sgepri.model.new_system_hispmu.rec.WamsSeqDataRec;
import data.ModelUpdateData;
import message.ScadaEvent.TransEventPkgProto;
import message.ServiceGridModel.GridModelDcsysOrBuilder;
import message.ServiceGridModel.GridModelResponse;
import message.ServiceModelMeas.ModelMeasResponse;
import message.YcTrans.RealDataPkg;
import warpper.MessageWarpper;

public class PmuUpdateHelper {
	

	public PmuUpdateHelper() {
		
	}
	
	public static List<ModelUpdateData> getYcModelUpdateDataList(List<? extends BasePModelRec> ycRecord) {
		List<ModelUpdateData> eventList = ycRecord.stream().map(rec -> {
			
			WamsSeqDataRec wamsRec = (WamsSeqDataRec)rec;
			
			int column_id = (int) (wamsRec.getId2() % 10000);
			long id2 = wamsRec.getId2() - column_id;
			long id = wamsRec.getId1() + id2;
			String attributteName = getAttributeName(wamsRec.getId1(), column_id);
			return new ModelUpdateData(id, attributteName, wamsRec.getValue(), 0);
		}).collect(Collectors.toList());
		return eventList;
	}

	private static String getAttributeName(long id1, int columnId) {
		return PlatfromClient.getAttributeName(id1, columnId);
	}



}
